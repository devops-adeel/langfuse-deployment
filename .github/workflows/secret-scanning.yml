name: Secret Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC for comprehensive scanning
    - cron: '0 2 * * *'
  workflow_dispatch:
    # Allow manual triggering for immediate scans

permissions:
  contents: read
  issues: write
  pull-requests: write
  security-events: write

jobs:
  gitleaks:
    name: Gitleaks Secret Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for comprehensive scanning

      - name: Run Gitleaks
        id: gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_CONFIG: .gitleaks.toml
        continue-on-error: true

      - name: Upload SARIF report
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif
        continue-on-error: true

      - name: Close PR if secrets detected
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Close the PR
            await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              state: 'closed'
            });

            // Add a comment explaining why
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `## üö® Security Alert: PR Automatically Closed

              This pull request has been automatically closed because potential secrets were detected.

              **Workflow Run:** [${context.runNumber}](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})

              ### Required Actions:
              1. Review the workflow logs to identify detected secrets
              2. Remove any secrets from your commits
              3. If secrets were exposed:
                 - Rotate them immediately in 1Password
                 - Update all services using those credentials
              4. Use \`op://\` references instead of actual secret values
              5. Create a new PR with clean commits

              ### Resources:
              - [Security Runbook](.security/RUNBOOK.md)
              - [Removing sensitive data from a repository](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/removing-sensitive-data-from-a-repository)

              If you believe this is a false positive, please review the [.gitleaks.toml](.gitleaks.toml) configuration.`
            });

      - name: Create security issue if secrets detected
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const actor = context.actor;
            const timestamp = new Date().toISOString();
            const workflowUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;

            const issueTitle = `üö® Security Alert: Secrets Detected - ${timestamp}`;

            const issueBody = `## Security Scan Failed

            Potential sensitive information was detected in the repository.

            **Detection Time:** ${timestamp}
            **Triggered By:** @${actor}
            **Workflow Run:** [View Details](${workflowUrl})
            **Event Type:** ${context.eventName}
            **Branch:** ${context.ref}
            **Commit:** ${context.sha}

            ### Severity: CRITICAL

            ### Immediate Actions Required:

            1. **Review Detection:**
               - Check the [workflow logs](${workflowUrl}) for specific secrets detected
               - Identify which files contain the exposed secrets

            2. **Rotate Affected Credentials:**
               - Open 1Password and rotate ALL detected secrets immediately
               - Update credentials in all services using them
               - Document rotation in this issue

            3. **Clean Repository:**
               - Remove secrets from current branch
               - Use \`op://\` references for all secrets
               - Consider using \`git filter-branch\` or BFG Repo-Cleaner if secrets are in history

            4. **Verify Fix:**
               - Run \`make security-scan\` locally
               - Ensure all secrets use 1Password references

            ### Prevention Checklist:

            - [ ] Pre-commit hooks installed (\`make security-init\`)
            - [ ] Using 1Password CLI for all secrets
            - [ ] Never copying actual secret values into files
            - [ ] Using \`.env.1password\` templates

            ### Security Resources:

            - [Security Runbook](.security/RUNBOOK.md)
            - [1Password CLI Documentation](https://developer.1password.com/docs/cli/)
            - [GitHub Secret Scanning](https://docs.github.com/en/code-security/secret-scanning)

            ### Incident Log Entry:

            \`\`\`
            Timestamp: ${timestamp}
            Actor: ${actor}
            Event: ${context.eventName}
            Branch: ${context.ref}
            Commit: ${context.sha}
            Status: DETECTED_AND_BLOCKED
            \`\`\`

            ---

            cc: @${actor}

            **Note:** This issue was automatically created by the secret scanning workflow. Do not close until all actions are completed and verified.`;

            // Create the issue
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody,
              labels: ['security', 'critical', 'incident', 'secret-exposure'],
              assignees: [actor]
            });

            console.log(`Security issue created: ${issue.data.html_url}`);

  # Summary job for branch protection rules
  secret-scanning-status:
    name: Secret Scanning Status
    needs: [gitleaks]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check status
        run: |
          if [ "${{ needs.gitleaks.result }}" == "failure" ]; then
            echo "‚ùå Secret scanning failed - secrets detected!"
            exit 1
          else
            echo "‚úÖ Secret scanning passed - no secrets detected"
          fi
