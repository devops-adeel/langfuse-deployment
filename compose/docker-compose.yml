# Langfuse Docker Compose - OrbStack Optimized Configuration
# This configuration is specifically designed for OrbStack on macOS
# All services are accessible via custom domains (*.local) without port mappings
#
# Service Access:
#   - Langfuse Web: http://langfuse.local
#   - MinIO Console: http://minio.local (port 9000)
#   - MinIO API: http://s3.langfuse.local
#   - PostgreSQL: postgres.langfuse.local:5432
#   - ClickHouse HTTP: http://clickhouse.local
#   - Redis: redis.langfuse.local:6379
#   - Worker: http://worker.langfuse.local
#
# OrbStack automatic domains (no configuration needed):
#   - https://langfuse-web.langfuse-prod.orb.local
#   - https://langfuse-worker.langfuse-prod.orb.local
#   - https://minio.langfuse-prod.orb.local
#   - https://clickhouse.langfuse-prod.orb.local
#   - https://redis.langfuse-prod.orb.local
#   - https://postgres.langfuse-prod.orb.local
#
# Integration: Works with Grafana-OrbStack for complete observability
# - Langfuse: LLM traces, prompts, completions, costs
# - Grafana: Infrastructure metrics, distributed traces, logs
# See docs/INTEGRATION.md for trace correlation setup

services:
  langfuse-worker:
    image: docker.io/langfuse/langfuse-worker:${LANGFUSE_WORKER_VERSION:-3.97.0}
    restart: unless-stopped
    depends_on: &langfuse-depends-on
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      redis:
        condition: service_healthy
      clickhouse:
        condition: service_healthy

    # OrbStack-specific: Custom domain configuration
    labels:
      # Custom domains for easier access (OrbStack feature)
      - dev.orbstack.domains=worker.langfuse.local
      - dev.orbstack.http-port=3030
      # Backup system integration (do not modify)
      - docker-volume-backup.stop-during-backup=langfuse-prod

    # No ports exposed - access via worker.langfuse.local
    # Uncomment below for debugging without domains:
    # ports:
    #   - "127.0.0.1:3030:3030"

    environment: &langfuse-worker-env
      # External access URL (uses OrbStack domain)
      NEXTAUTH_URL: http://langfuse.local

      # Database configuration
      DATABASE_URL: ${DATABASE_URL}
      SALT: ${SALT}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}

      # Telemetry and features
      TELEMETRY_ENABLED: ${TELEMETRY_ENABLED:-true}
      LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES: ${LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES:-true}

      # ClickHouse configuration
      CLICKHOUSE_MIGRATION_URL: ${CLICKHOUSE_MIGRATION_URL:-clickhouse://clickhouse:9000}
      CLICKHOUSE_URL: ${CLICKHOUSE_URL:-http://clickhouse:8123}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-clickhouse}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
      CLICKHOUSE_CLUSTER_ENABLED: ${CLICKHOUSE_CLUSTER_ENABLED:-false}

      # S3/MinIO configuration
      LANGFUSE_USE_AZURE_BLOB: ${LANGFUSE_USE_AZURE_BLOB:-false}

      # Event upload configuration (internal communication)
      LANGFUSE_S3_EVENT_UPLOAD_BUCKET: ${LANGFUSE_S3_EVENT_UPLOAD_BUCKET:-langfuse}
      LANGFUSE_S3_EVENT_UPLOAD_REGION: ${LANGFUSE_S3_EVENT_UPLOAD_REGION:-auto}
      LANGFUSE_S3_EVENT_UPLOAD_ACCESS_KEY_ID: ${LANGFUSE_S3_EVENT_UPLOAD_ACCESS_KEY_ID:-minio}
      LANGFUSE_S3_EVENT_UPLOAD_SECRET_ACCESS_KEY: ${LANGFUSE_S3_EVENT_UPLOAD_SECRET_ACCESS_KEY}
      LANGFUSE_S3_EVENT_UPLOAD_ENDPOINT: ${LANGFUSE_S3_EVENT_UPLOAD_ENDPOINT:-http://minio:9000}
      LANGFUSE_S3_EVENT_UPLOAD_FORCE_PATH_STYLE: ${LANGFUSE_S3_EVENT_UPLOAD_FORCE_PATH_STYLE:-true}
      LANGFUSE_S3_EVENT_UPLOAD_PREFIX: ${LANGFUSE_S3_EVENT_UPLOAD_PREFIX:-events/}

      # Media upload configuration (uses OrbStack internal domain)
      LANGFUSE_S3_MEDIA_UPLOAD_BUCKET: ${LANGFUSE_S3_MEDIA_UPLOAD_BUCKET:-langfuse}
      LANGFUSE_S3_MEDIA_UPLOAD_REGION: ${LANGFUSE_S3_MEDIA_UPLOAD_REGION:-auto}
      LANGFUSE_S3_MEDIA_UPLOAD_ACCESS_KEY_ID: ${LANGFUSE_S3_MEDIA_UPLOAD_ACCESS_KEY_ID:-minio}
      LANGFUSE_S3_MEDIA_UPLOAD_SECRET_ACCESS_KEY: ${LANGFUSE_S3_MEDIA_UPLOAD_SECRET_ACCESS_KEY}
      LANGFUSE_S3_MEDIA_UPLOAD_ENDPOINT: ${LANGFUSE_S3_MEDIA_UPLOAD_ENDPOINT:-http://minio:9000}
      LANGFUSE_S3_MEDIA_UPLOAD_EXTERNAL_ENDPOINT: http://minio.local
      LANGFUSE_S3_MEDIA_UPLOAD_FORCE_PATH_STYLE: ${LANGFUSE_S3_MEDIA_UPLOAD_FORCE_PATH_STYLE:-true}
      LANGFUSE_S3_MEDIA_UPLOAD_PREFIX: ${LANGFUSE_S3_MEDIA_UPLOAD_PREFIX:-media/}

      # Batch export configuration
      LANGFUSE_S3_BATCH_EXPORT_ENABLED: ${LANGFUSE_S3_BATCH_EXPORT_ENABLED:-true}
      LANGFUSE_S3_BATCH_EXPORT_BUCKET: ${LANGFUSE_S3_BATCH_EXPORT_BUCKET:-langfuse}
      LANGFUSE_S3_BATCH_EXPORT_PREFIX: ${LANGFUSE_S3_BATCH_EXPORT_PREFIX:-exports/}
      LANGFUSE_S3_BATCH_EXPORT_REGION: ${LANGFUSE_S3_BATCH_EXPORT_REGION:-auto}
      LANGFUSE_S3_BATCH_EXPORT_ENDPOINT: ${LANGFUSE_S3_BATCH_EXPORT_ENDPOINT:-http://minio:9000}
      LANGFUSE_S3_BATCH_EXPORT_EXTERNAL_ENDPOINT: http://minio.local
      LANGFUSE_S3_BATCH_EXPORT_ACCESS_KEY_ID: ${LANGFUSE_S3_BATCH_EXPORT_ACCESS_KEY_ID:-minio}
      LANGFUSE_S3_BATCH_EXPORT_SECRET_ACCESS_KEY: ${LANGFUSE_S3_BATCH_EXPORT_SECRET_ACCESS_KEY}
      LANGFUSE_S3_BATCH_EXPORT_FORCE_PATH_STYLE: ${LANGFUSE_S3_BATCH_EXPORT_FORCE_PATH_STYLE:-true}

      # Queue configuration
      LANGFUSE_INGESTION_QUEUE_DELAY_MS: ${LANGFUSE_INGESTION_QUEUE_DELAY_MS:-}
      LANGFUSE_INGESTION_CLICKHOUSE_WRITE_INTERVAL_MS: ${LANGFUSE_INGESTION_CLICKHOUSE_WRITE_INTERVAL_MS:-}

      # Redis configuration
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_AUTH: ${REDIS_AUTH}
      REDIS_TLS_ENABLED: ${REDIS_TLS_ENABLED:-false}

      # Email configuration (optional)
      EMAIL_FROM_ADDRESS: ${EMAIL_FROM_ADDRESS:-}
      SMTP_CONNECTION_URL: ${SMTP_CONNECTION_URL:-}

  langfuse-web:
    # Main Langfuse web service
    # Integration: Exports traces via OTLP to Grafana Tempo (if configured)
    # Trace correlation: ${TRACE_ID} visible in both Langfuse and Grafana systems
    # Grafana dashboards available at: http://grafana.local/d/langfuse-ops
    image: docker.io/langfuse/langfuse:${LANGFUSE_VERSION:-3.97.0}
    restart: unless-stopped
    depends_on: *langfuse-depends-on

    # OrbStack-specific: Custom domain configuration
    labels:
      # Custom domains for easier access (OrbStack feature)
      - dev.orbstack.domains=langfuse.local,web.langfuse.local
      - dev.orbstack.http-port=3000
      # Backup system integration (do not modify)
      - docker-volume-backup.stop-during-backup=langfuse-prod

    # No ports exposed - access via langfuse.local
    # Uncomment below for debugging without domains:
    # ports:
    #   - "3002:3000"

    environment:
      <<: *langfuse-worker-env
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}

      # Optional: Enable OTLP export to Grafana stack
      # LANGFUSE_ENABLE_OTLP: ${LANGFUSE_ENABLE_OTLP:-false}
      # OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT:-http://alloy.local:4318}
      # OTEL_SERVICE_NAME: ${OTEL_SERVICE_NAME:-langfuse}

      # Initial setup configuration (optional)
      LANGFUSE_INIT_ORG_ID: ${LANGFUSE_INIT_ORG_ID:-}
      LANGFUSE_INIT_ORG_NAME: ${LANGFUSE_INIT_ORG_NAME:-}
      LANGFUSE_INIT_PROJECT_ID: ${LANGFUSE_INIT_PROJECT_ID:-}
      LANGFUSE_INIT_PROJECT_NAME: ${LANGFUSE_INIT_PROJECT_NAME:-}
      LANGFUSE_INIT_PROJECT_PUBLIC_KEY: ${LANGFUSE_INIT_PROJECT_PUBLIC_KEY:-}
      LANGFUSE_INIT_PROJECT_SECRET_KEY: ${LANGFUSE_INIT_PROJECT_SECRET_KEY:-}
      LANGFUSE_INIT_USER_EMAIL: ${LANGFUSE_INIT_USER_EMAIL:-}
      LANGFUSE_INIT_USER_NAME: ${LANGFUSE_INIT_USER_NAME:-}
      LANGFUSE_INIT_USER_PASSWORD: ${LANGFUSE_INIT_USER_PASSWORD:-}

  clickhouse:
    image: docker.io/clickhouse/clickhouse-server:${CLICKHOUSE_VERSION:-24.3.3.102-alpine}
    restart: unless-stopped
    user: "101:101"

    # OrbStack-specific: Custom domain configuration
    labels:
      # Custom domains for HTTP interface (OrbStack feature)
      - dev.orbstack.domains=clickhouse.local,clickhouse.langfuse.local
      - dev.orbstack.http-port=8123
      # Backup system integration
      - docker-volume-backup.stop-during-backup=langfuse-prod

    # No ports exposed - access via clickhouse.local
    # Uncomment below for debugging without domains:
    # ports:
    #   - "127.0.0.1:8123:8123"  # HTTP interface
    #   - "127.0.0.1:9000:9000"  # Native protocol

    environment:
      CLICKHOUSE_DB: default
      CLICKHOUSE_USER: clickhouse
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}

    volumes:
      - langfuse_clickhouse_data:/var/lib/clickhouse
      - langfuse_clickhouse_logs:/var/log/clickhouse-server

    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://127.0.0.1:8123/ping || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 1s

  minio:
    image: docker.io/minio/minio:${MINIO_VERSION:-RELEASE.2024-08-17T01-24-54Z}
    restart: unless-stopped
    entrypoint: sh
    command: -c 'mkdir -p /data/langfuse && minio server --address ":9000" --console-address ":9001" /data'

    # OrbStack-specific: Custom domain configuration
    labels:
      # Custom domains for MinIO API and console (OrbStack feature)
      - dev.orbstack.domains=minio.local,s3.langfuse.local,minio-console.local
      - dev.orbstack.http-port=9000
      # Backup system integration
      - docker-volume-backup.stop-during-backup=langfuse-prod

    # No ports exposed - access via minio.local
    # Uncomment below for debugging without domains:
    # ports:
    #   - "127.0.0.1:9090:9000"  # API
    #   - "127.0.0.1:9091:9001"  # Console

    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}

    volumes:
      - langfuse_minio_data:/data

    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 1s
      timeout: 5s
      retries: 5
      start_period: 1s

  redis:
    image: docker.io/redis:${REDIS_VERSION:-7.2.5-alpine}
    restart: unless-stopped
    command: >
      --requirepass ${REDIS_AUTH}

    # OrbStack-specific: Custom domain configuration
    labels:
      # Custom domains for Redis (OrbStack feature)
      - dev.orbstack.domains=redis.langfuse.local,cache.local
      - dev.orbstack.tcp-port=6379
      # Backup system integration
      - docker-volume-backup.stop-during-backup=langfuse-prod

    # No ports exposed - access via redis.langfuse.local:6379
    # Uncomment below for debugging without domains:
    # ports:
    #   - "127.0.0.1:6379:6379"

    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_AUTH}", "ping"]
      interval: 3s
      timeout: 10s
      retries: 10

  postgres:
    image: docker.io/postgres:${POSTGRES_VERSION:-15.7-alpine}
    restart: unless-stopped

    # OrbStack-specific: Custom domain configuration
    labels:
      # Custom domains for PostgreSQL (OrbStack feature)
      - dev.orbstack.domains=postgres.langfuse.local,db.local
      - dev.orbstack.tcp-port=5432
      # Backup system integration with pre-backup hook
      - docker-volume-backup.stop-during-backup=langfuse-prod
      - docker-volume-backup.archive-pre=/bin/sh -c 'pg_dump -U postgres postgres > /backup/postgres-dump.sql'
      - docker-volume-backup.exec-label=langfuse-backup

    # No ports exposed - access via postgres.langfuse.local:5432
    # Uncomment below for debugging without domains:
    # ports:
    #   - "127.0.0.1:5432:5432"

    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: postgres

    volumes:
      - langfuse_postgres_data:/var/lib/postgresql/data
      - /tmp/postgres-backup:/backup

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 3s
      timeout: 3s
      retries: 10

# Named volumes for data persistence
volumes:
  langfuse_postgres_data:
    driver: local
  langfuse_clickhouse_data:
    driver: local
  langfuse_clickhouse_logs:
    driver: local
  langfuse_minio_data:
    driver: local

# Network configuration optimized for OrbStack on macOS
networks:
  default:
    external: true
    name: orbstack-shared
    driver_opts:
      # Lower MTU for stability on macOS (OrbStack-specific)
      com.docker.network.driver.mtu: 1400
